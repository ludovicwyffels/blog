{"version":3,"sources":["webpack:///./src/components/pagination/Pagination.tsx","webpack:///./src/templates/tags.tsx"],"names":["SiteNav","props","render","this","baseURL","pageContext","currentPage","numPages","isFirst","limit","skip","isLast","prevPage","nextPage","className","role","to","rel","React","Tags","tagURL","tag","data","allMarkdownRemark","edges","totalCount","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","siteTitle","name","content","description","property","siteUrl","pathContext","slug","facebook","twitter","split","image","css","outer","SiteHeader","style","backgroundImage","childImageSharp","fluid","src","inner","isHome","SiteMain","PostFeed","PostFeedRaise","map","key","fields","post","pageQuery"],"mappings":"sJAmBMA,E,oBAEJ,WAAYC,GAAwB,OAClC,YAAMA,IAD4B,K,0GAIpCC,OAAA,WAAS,MACmBC,KAAKF,MAAvBG,eADD,MACW,IADX,IAEwCD,KAAKF,MAAMI,YAAlDC,EAFD,EAECA,YAAaC,EAFd,EAEcA,SACfC,GAHC,EAEwBC,MAFxB,EAE+BC,KACN,IAAhBJ,GACVK,EAASL,IAAgBC,EACzBK,EAAWN,EAAc,GAAM,EAApB,GAA2BF,EAAeA,EAA1C,SAAyDE,EAAc,GAClFO,EAAcT,EAAN,SAAqBE,EAAc,GAEjD,MACE,CAAE,mBAAKQ,UAAU,aAAaC,KAAK,eAC7BP,GACA,YAAC,OAAD,CAAMQ,GAAIJ,EAAUK,IAAI,OAAOH,UAAU,eAAzC,KACI,oBAAMA,UAAU,QAAhB,kBAGN,oBAAMA,UAAU,eACd,oBAAMA,UAAU,QAAhB,QACQR,EADR,IACsBC,KAGtBI,GACA,YAAC,OAAD,CAAMK,GAAIH,EAAUI,IAAI,OAAOH,UAAU,eACvC,oBAAMA,UAAU,QAAhB,aADF,S,GA3BUI,aAoCPlB,O,+QCoFAmB,UA/EyC,SAAAlB,GAAS,IACvDmB,EAAWnB,EAAMI,YAAjBe,OACFC,EAAMpB,EAAMI,YAAYgB,IAFiC,EAGjCpB,EAAMqB,KAAKC,kBAAjCC,EAHuD,EAGvDA,MAAOC,EAHgD,EAGhDA,WACTC,EAAUzB,EAAMqB,KAAKK,WAAWH,MAAMI,MAC1C,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,GAAGC,gBAAkBX,EAAIW,iBAGvC,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,KAAMC,IAAOD,OACnB,yBACGZ,EADH,MACWa,IAAOC,WAElB,oBACEC,KAAK,cACLC,QAASX,GAAWA,EAAQI,KAAOJ,EAAQI,KAAKQ,YAAc,KAEhE,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,YAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAAYhB,EAAL,MAAca,IAAOC,YACtD,oBAAMI,SAAS,SAASF,QAASH,IAAOM,QAAUvC,EAAMwC,YAAYC,OACnER,IAAOS,UAAY,oBAAMJ,SAAS,oBAAoBF,QAASH,IAAOS,WACvE,oBAAMP,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAYhB,EAAL,MAAca,IAAOC,YACvD,oBAAMC,KAAK,cAAcC,QAASH,IAAOM,QAAUvC,EAAMwC,YAAYC,OACpER,IAAOU,SACN,oBACER,KAAK,eACLC,QAAO,IAAMH,IAAOU,QAAQC,MAAM,wBAAwB,MAIhE,YAAC,IAAD,KACE,sBACE/B,UAAcY,GAAWA,EAAQI,KAAKgB,MAAQ,GAAK,WACnDC,IAAG,YAAE,CAACC,IAAOC,MACbC,MAAO,CACLC,gBACEzB,GAAWA,EAAQI,KAAKgB,MAAxB,QACYpB,EAAQI,KAAKgB,MAAMM,gBAAgBC,MAAMC,IADrD,KAEI,KAGR,mBAAKP,IAAKQ,KACR,YAAC,IAAD,CAASC,QAAQ,IACjB,YAAC,IAAD,KACE,YAAC,IAAD,KAAYnC,GACZ,YAAC,IAAD,KACGK,GAAWA,EAAQI,KAAKQ,YACvBZ,EAAQI,KAAKQ,YAEX,iDACmBb,EAAa,GAAQA,EAArB,SACD,IAAfA,GAAA,SACe,IAAfA,GAAA,gBAOf,oBAAMM,GAAG,YAAYgB,IAAG,YAAE,CAACU,IAAUT,OACnC,mBAAKD,IAAKQ,KACR,mBAAKR,IAAG,YAAE,CAACW,IAAUC,OAClBnC,EAAMoC,KAAI,gBAAG9B,EAAH,EAAGA,KAAH,OACT,YAAC,IAAD,CAAU+B,IAAK/B,EAAKgC,OAAOpB,KAAMqB,KAAMjC,QAG3C,YAAC,IAAD,CAAYzB,YAAaJ,EAAMI,YAAaD,QAAO,SAAWgB,EAAX,QAGvD,YAAC,IAAD,SAQD,IAAM4C,EAAY","file":"component---src-templates-tags-tsx-9189e8b646bbd41f8491.js","sourcesContent":["// tslint:disable:no-http-string\nimport { Link } from 'gatsby';\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport './pagination.css';\n\ninterface PaginationProps {\n  baseURL: String;\n  pageContext: {\n    currentPage: number;\n    isCreatedByStatefulCreatePages: boolean;\n    limit: number;\n    numPages: number;\n    skip: number;\n  }\n}\n\nclass SiteNav extends React.Component<PaginationProps> {\n\n  constructor(props: PaginationProps) {\n    super(props);\n  };\n\n  render() {\n    const { baseURL = '/' } = this.props;\n    const { currentPage, numPages, limit, skip } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? `${baseURL}` : `${baseURL}page/${currentPage - 1}`\n    const nextPage = `${baseURL}page/${currentPage + 1}`\n\n    return (\n      [ <nav className=\"pagination\" role=\"navigation\">\n          {!isFirst && (\n            <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n              ← <span className=\"hide\">Previous Page</span>\n            </Link>\n          )}\n          <span className=\"page-number\">\n            <span className=\"hide\">\n              Page {currentPage}/{numPages}\n            </span>\n          </span>\n          {!isLast && (\n            <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n              <span className=\"hide\">Next Page</span> →\n            </Link>\n          )}\n        </nav>]\n    );\n  }\n}\n\nexport default SiteNav;\n\n\n\n            ","import { graphql, Link } from 'gatsby';\nimport React from 'react';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/pagination/Pagination';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport Helmet from 'react-helmet';\nimport config from '../website-config';\n\ninterface TagTemplateProps {\n  pathContext: {\n    slug: string;\n  };\n  pageContext: {\n    tag: string;\n    tagURL: string;\n    currentPage: number;\n    isCreatedByStatefulCreatePages: boolean;\n    limit: number;\n    numPages: number;\n    skip: number;\n  };\n  data: {\n    allTagYaml: {\n      edges: {\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: any;\n            };\n          };\n        };\n      }[];\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: {\n        node: PageContext;\n      }[];\n    };\n  };\n}\n\nconst Tags: React.FunctionComponent<TagTemplateProps> = props => {\n  const { tagURL } = props.pageContext\n  const tag = props.pageContext.tag;\n  const { edges, totalCount } = props.data.allMarkdownRemark;\n  const tagData = props.data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.siteTitle}\n        </title>\n        <meta\n          name=\"description\"\n          content={tagData && tagData.node ? tagData.node.description : ''}\n        />\n        <meta property=\"og:site_name\" content={config.siteTitle} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.siteTitle}`} />\n        <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.siteTitle}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className={`${tagData && tagData.node.image ? '' : 'no-cover'}`}\n          css={[outer, SiteHeader]}\n          style={{\n            backgroundImage:\n              tagData && tagData.node.image\n                ? `url('${tagData.node.image.childImageSharp.fluid.src}')`\n                : '',\n          }}\n        >\n          <div css={inner}>\n            <SiteNav isHome={false} />\n            <SiteHeaderContent>\n              <SiteTitle>{tag}</SiteTitle>\n              <SiteDescription>\n                {tagData && tagData.node.description ? (\n                  tagData.node.description\n                ) : (\n                    <>\n                      A collection of {totalCount > 1 && `${totalCount} posts`}\n                      {totalCount === 1 && `1 post`}\n                      {totalCount === 0 && `No posts`}\n                    </>\n                  )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed, PostFeedRaise]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n            <Pagination pageContext={props.pageContext} baseURL={`/tags/${tagURL}/`} />\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String, $limit: Int, $skip: Int) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n      limit: $limit,\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            subtitle\n            tags\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 90) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}