{"version":3,"sources":["webpack:///./src/templates/category.tsx"],"names":["Categories","props","category","pageContext","data","allMarkdownRemark","edges","totalCount","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","title","name","content","description","property","siteUrl","pathContext","slug","facebook","twitter","split","className","image","css","outer","SiteHeader","style","backgroundImage","childImageSharp","fluid","src","inner","isHome","SiteMain","PostFeed","PostFeedRaise","map","key","fields","post","pageQuery"],"mappings":"4TAmIeA,UA7EqC,SAAAC,GAChD,IAAMC,EAAYD,EAAME,YAAYD,SAAYD,EAAME,YAAYD,SAAW,GADpB,EAE3BD,EAAMG,KAAKC,kBAAjCC,EAFiD,EAEjDA,MAAOC,EAF0C,EAE1CA,WACTC,EAAUP,EAAMG,KAAKK,WAAWH,MAAMI,MACxC,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,GAAGC,gBAAkBZ,EAASY,iBAG9C,OACI,YAAC,IAAD,KACI,YAAC,IAAD,KACI,oBAAMC,KAAMC,IAAOD,OACnB,yBACKb,EADL,MACkBc,IAAOC,OAEzB,oBACIC,KAAK,cACLC,QAASX,GAAWA,EAAQI,KAAOJ,EAAQI,KAAKQ,YAAc,KAElE,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAAYjB,EAAL,MAAmBc,IAAOC,QAC3D,oBAAMI,SAAS,SAASF,QAASH,IAAOM,QAAUrB,EAAMsB,YAAYC,OACnER,IAAOS,UAAY,oBAAMJ,SAAS,oBAAoBF,QAASH,IAAOS,WACvE,oBAAMP,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAYjB,EAAL,MAAmBc,IAAOC,QAC5D,oBAAMC,KAAK,cAAcC,QAASH,IAAOM,QAAUrB,EAAMsB,YAAYC,OACpER,IAAOU,SACJ,oBACIR,KAAK,eACLC,QAAO,IAAMH,IAAOU,QAAQC,MAAM,wBAAwB,MAItE,YAAC,IAAD,KACI,sBACIC,UAAcpB,GAAWA,EAAQI,KAAKiB,MAAQ,GAAK,WACnDC,IAAG,YAAE,CAACC,IAAOC,MACbC,MAAO,CACHC,gBACI1B,GAAWA,EAAQI,KAAKiB,MAAxB,QACYrB,EAAQI,KAAKiB,MAAMM,gBAAgBC,MAAMC,IADrD,KAEI,KAGZ,mBAAKP,IAAKQ,KACN,YAAC,IAAD,CAASC,QAAQ,IACjB,YAAC,IAAD,KACI,YAAC,IAAD,KAAYrC,GACZ,YAAC,IAAD,KACKM,GAAWA,EAAQI,KAAKQ,YACrBZ,EAAQI,KAAKQ,YAEb,iDACqBb,EAAa,GAAQA,EAArB,SACD,IAAfA,GAAoB,SACL,IAAfA,GAAoB,gBAO7C,oBAAMM,GAAG,YAAYiB,IAAG,YAAE,CAACU,IAAUT,OACjC,mBAAKD,IAAKQ,KACN,mBAAKR,IAAG,YAAE,CAACW,IAAUC,OAChBpC,EAAMqC,KAAI,gBAAG/B,EAAH,EAAGA,KAAH,OACP,YAAC,IAAD,CAAUgC,IAAKhC,EAAKiC,OAAOrB,KAAMsB,KAAMlC,UAKvD,YAAC,IAAD,SAQT,IAAMmC,EAAY","file":"component---src-templates-category-tsx-04a5fc231d3b3ee1f1f8.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport Footer from '../components/footer/footer';\nimport SiteNav from '../components/header/siteNav/siteNav';\nimport PostCard from '../components/postCard/postCard';\nimport Wrapper from '../components/wrapper/wrapper';\nimport IndexLayout from '../layouts';\nimport {\n    inner,\n    outer,\n    PostFeed,\n    PostFeedRaise,\n    SiteDescription,\n    SiteHeader,\n    SiteHeaderContent,\n    SiteMain,\n    SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport Helmet from 'react-helmet';\nimport config from '../website-config';\n\ninterface CategoryTemplateProps {\n    pathContext: {\n        slug: string;\n    };\n    pageContext: {\n        category: string;\n        tag: string;\n    };\n    data: {\n        allTagYaml: {\n            edges: {\n                node: {\n                    id: string;\n                    description: string;\n                    image?: {\n                        childImageSharp: {\n                            fluid: any;\n                        };\n                    };\n                };\n            }[];\n        };\n        allMarkdownRemark: {\n            totalCount: number;\n            edges: {\n                node: PageContext;\n            }[];\n        };\n    };\n}\n\nconst Categories: React.FC<CategoryTemplateProps> = props => {\n    const category = (props.pageContext.category) ? props.pageContext.category : '';\n    const { edges, totalCount } = props.data.allMarkdownRemark;\n    const tagData = props.data.allTagYaml.edges.find(\n        n => n.node.id.toLowerCase() === category.toLowerCase(),\n    );\n\n    return (\n        <IndexLayout>\n            <Helmet>\n                <html lang={config.lang} />\n                <title>\n                    {category} - {config.title}\n                </title>\n                <meta\n                    name=\"description\"\n                    content={tagData && tagData.node ? tagData.node.description : ''}\n                />\n                <meta property=\"og:site_name\" content={config.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={`${category} - ${config.title}`} />\n                <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\n                {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n                <meta name=\"twitter:card\" content=\"summary_large_image\" />\n                <meta name=\"twitter:title\" content={`${category} - ${config.title}`} />\n                <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\n                {config.twitter && (\n                    <meta\n                        name=\"twitter:site\"\n                        content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n                    />\n                )}\n            </Helmet>\n            <Wrapper>\n                <header\n                    className={`${tagData && tagData.node.image ? '' : 'no-cover'}`}\n                    css={[outer, SiteHeader]}\n                    style={{\n                        backgroundImage:\n                            tagData && tagData.node.image ?\n                                `url('${tagData.node.image.childImageSharp.fluid.src}')` :\n                                '',\n                    }}\n                >\n                    <div css={inner}>\n                        <SiteNav isHome={false} />\n                        <SiteHeaderContent>\n                            <SiteTitle>{category}</SiteTitle>\n                            <SiteDescription>\n                                {tagData && tagData.node.description ? (\n                                    tagData.node.description\n                                ) : (\n                                    <>\n                                        A collection of {totalCount > 1 && `${totalCount} posts`}\n                                        {totalCount === 1 && '1 post'}\n                                        {totalCount === 0 && 'No posts'}\n                                    </>\n                                )}\n                            </SiteDescription>\n                        </SiteHeaderContent>\n                    </div>\n                </header>\n                <main id=\"site-main\" css={[SiteMain, outer]}>\n                    <div css={inner}>\n                        <div css={[PostFeed, PostFeedRaise]}>\n                            {edges.map(({ node }) => (\n                                <PostCard key={node.fields.slug} post={node} />\n                            ))}\n                        </div>\n                    </div>\n                </main>\n                <Footer />\n            </Wrapper>\n        </IndexLayout>\n    );\n};\n\nexport default Categories;\n\nexport const pageQuery = graphql`\n  query($category: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { in: [$category] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            subtitle\n            tags\n            category\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              name\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 90) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}