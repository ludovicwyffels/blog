{"version":3,"sources":["webpack:///./src/components/pagination/Pagination.tsx","webpack:///./src/templates/author.tsx"],"names":["SiteNav","props","render","this","baseURL","pageContext","currentPage","numPages","isFirst","limit","skip","isLast","prevPage","nextPage","className","role","to","rel","React","HiddenMobile","AuthorMeta","AuthorBio","Bull","AuthorProfileBioImage","Author","author","data","authorYaml","authorId","edges","allMarkdownRemark","filter","edge","node","frontmatter","draft","process","id","totalCount","lang","config","siteTitle","name","content","bio","property","siteUrl","pathContext","slug","title","twitter","split","github","css","outer","SiteHeader","inner","isHome","AuthorProfileImage","src","avatar","childImageSharp","fluid","alt","location","SocialLink","href","target","SiteMain","PostFeed","PostFeedRaise","map","key","fields","post","pageQuery"],"mappings":"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","file":"component---src-templates-author-tsx-9d7c51b5894fdb47cc86.js","sourcesContent":["// tslint:disable:no-http-string\nimport { Link } from 'gatsby';\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport './pagination.css';\n\ninterface PaginationProps {\n  baseURL: String;\n  pageContext: {\n    currentPage: number;\n    isCreatedByStatefulCreatePages: boolean;\n    limit: number;\n    numPages: number;\n    skip: number;\n  }\n}\n\nclass SiteNav extends React.Component<PaginationProps> {\n\n  constructor(props: PaginationProps) {\n    super(props);\n  };\n\n  render() {\n    const { baseURL = '/' } = this.props;\n    const { currentPage, numPages, limit, skip } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? `${baseURL}` : `${baseURL}page/${currentPage - 1}`\n    const nextPage = `${baseURL}page/${currentPage + 1}`\n\n    return (\n      [ <nav className=\"pagination\" role=\"navigation\">\n          {!isFirst && (\n            <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n              ← <span className=\"hide\">Previous Page</span>\n            </Link>\n          )}\n          <span className=\"page-number\">\n            <span className=\"hide\">\n              Page {currentPage}/{numPages}\n            </span>\n          </span>\n          {!isLast && (\n            <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n              <span className=\"hide\">Next Page</span> →\n            </Link>\n          )}\n        </nav>]\n    );\n  }\n}\n\nexport default SiteNav;\n\n\n\n            ","import { graphql } from 'gatsby';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/pagination/Pagination';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  AuthorProfileImage,\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteTitle,\n  SiteMain,\n  SocialLink,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport Helmet from 'react-helmet';\nimport config from '../website-config';\nimport Twitter from '../components/icons/twitter';\nimport Github from '../components/icons/github';\n\nconst HiddenMobile = css`\n  @media (max-width: 500px) {\n    display: none;\n  }\n`;\n\nconst AuthorMeta = styled.div`\n  z-index: 10;\n  flex-shrink: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 0 10px 0;\n  font-family: Georgia, serif;\n  font-style: italic;\n`;\n\nconst AuthorBio = styled.h2`\n  z-index: 10;\n  flex-shrink: 0;\n  margin: 5px 0 10px 0;\n  max-width: 600px;\n  font-size: 2rem;\n  line-height: 1.3em;\n  font-weight: 300;\n  letter-spacing: 0.5px;\n  opacity: 0.8;\n`;\n\nconst Bull = styled.span`\n  display: inline-block;\n  margin: 0 12px;\n  opacity: 0.5;\n`;\n\nconst AuthorProfileBioImage = css`\n  z-index: 10;\n  flex-shrink: 0;\n  margin: 0 0 20px 0;\n  width: 100px;\n  height: 100px;\n  box-shadow: rgba(255, 255, 255, 0.1) 0 0 0 6px;\n`;\n\ninterface AuthorTemplateProps {\n  pathContext: {\n    slug: string;\n  };\n  pageContext: {\n    authorId: string;\n    currentPage: number;\n    isCreatedByStatefulCreatePages: boolean;\n    limit: number;\n    numPages: number;\n    skip: number;\n  };\n  data: {\n    logo: {\n      childImageSharp: {\n        fluid: any;\n      };\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: {\n        node: PageContext;\n      }[];\n    };\n    authorYaml: {\n      id: string;\n      name: string;\n      website?: string;\n      twitter?: string;\n      facebook?: string;\n      github?: string;\n      location?: string;\n      profile_image?: {\n        childImageSharp: {\n          fluid: any;\n        };\n      };\n      bio?: string;\n      avatar: {\n        childImageSharp: {\n          fluid: any;\n        };\n      };\n    };\n  };\n}\n\nconst Author: React.FunctionComponent<AuthorTemplateProps> = props => {\n  const author = props.data.authorYaml;\n  const { authorId } = props.pageContext\n  const edges = props.data.allMarkdownRemark.edges.filter(\n    (edge) => {\n      const isDraft = (edge.node.frontmatter.draft !== true ||\n        process.env.NODE_ENV === 'development')\n      return isDraft && edge.node.frontmatter.author && edge.node.frontmatter.author.id === author.id\n    }\n  );\n  const { totalCount } = props.data.allMarkdownRemark;\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {author.id} - {config.siteTitle}\n        </title>\n        <meta name=\"description\" content={author.bio} />\n        <meta property=\"og:site_name\" content={config.siteTitle} />\n        <meta property=\"og:type\" content=\"profile\" />\n        <meta property=\"og:title\" content={`${author.id} - ${config.siteTitle}`} />\n        <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\n        <meta property=\"article:publisher\" content=\"https://www.facebook.com/santypk4\" />\n        <meta property=\"article:author\" content=\"https://www.facebook.com/santypk4\" />\n        <meta name=\"twitter:card\" content=\"summary\" />\n        <meta name=\"twitter:title\" content={`${author.id} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        {config.twitter && (\n          <meta\n            name=\"twitter:creator\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        {config.github && (\n          <meta\n            name=\"github:site\"\n            content={`@${config.github.split('https://github.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className=\"no-cover\"\n          css={[outer, SiteHeader]}\n        >\n          <div css={inner}>\n            <SiteNav isHome={false} />\n            <SiteHeaderContent>\n              <img\n                css={[AuthorProfileImage, AuthorProfileBioImage]}\n                src={props.data.authorYaml.avatar.childImageSharp.fluid.src}\n                alt={author.id}\n              />\n              <SiteTitle>{author.name} </SiteTitle>\n              {author.bio && <AuthorBio>{author.bio}</AuthorBio>}\n              <AuthorMeta>\n                {author.location && (\n                  <div css={HiddenMobile}>\n                    📍 {author.location} <Bull>&bull;</Bull>\n                  </div>\n                )}\n                <div css={HiddenMobile}>\n                  {totalCount > 1 && `${totalCount} posts`}\n                  {totalCount === 1 && `1 post`}\n                  {totalCount === 0 && `No posts`} <Bull>•</Bull>\n                </div>\n                {author.twitter && (\n                  <a\n                    className=\"social-link-tw\"\n                    css={SocialLink}\n                    href={`https://twitter.com/${author.twitter}`}\n                    title=\"Twitter\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <Twitter />\n                  </a>\n                )}\n                {author.github && (\n                  <a\n                    className=\"social-link-gh\"\n                    css={SocialLink}\n                    href={`https://github.com/${author.github}`}\n                    title=\"Github\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <Github />\n                  </a>\n                )}\n              </AuthorMeta>\n            </SiteHeaderContent>\n          </div>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed, PostFeedRaise]}>\n              {edges.map(({ node }) => {\n                return <PostCard key={node.fields.slug} post={node} />;\n              })}\n            </div>\n            <Pagination pageContext={props.pageContext} baseURL={`/author/${authorId}/`} />\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Author;\n\nexport const pageQuery = graphql`\n  query($author: String, $limit: Int, $skip: Int) {\n    authorYaml(id: { eq: $author }) {\n      id\n      name\n      website\n      twitter\n      bio\n      facebook\n      location\n      profile_image {\n        childImageSharp {\n          fluid(maxWidth: 3720) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      avatar {\n        childImageSharp {\n          fluid(maxWidth: 200) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { \n        fields: [frontmatter___date], order: DESC }\n        limit: $limit,\n        skip: $skip\n    ) {\n      totalCount,\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            subtitle\n            tags\n            date\n            draft\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 90) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}