{"version":3,"sources":["webpack:///./src/components/pagination/Pagination.tsx","webpack:///./src/templates/blog.tsx"],"names":["SiteNav","props","render","this","baseURL","pageContext","currentPage","numPages","isFirst","limit","skip","isLast","prevPage","nextPage","className","role","to","rel","React","HomePosts","PageTemplate","width","data","header","childImageSharp","fluid","sizes","split","height","String","Number","aspectRatio","css","lang","config","siteTitle","name","content","description","property","siteUrl","src","facebook","title","twitter","outer","SiteHeader","style","backgroundImage","inner","isHome","id","SiteMain","PostFeed","PostFeedRaise","allMarkdownRemark","edges","map","post","node","frontmatter","draft","key","fields","slug","children","pageQuery"],"mappings":"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","file":"component---src-templates-blog-tsx-db6b5cc197ad98be6fce.js","sourcesContent":["// tslint:disable:no-http-string\nimport { Link } from 'gatsby';\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport './pagination.css';\n\ninterface PaginationProps {\n  baseURL: String;\n  pageContext: {\n    currentPage: number;\n    isCreatedByStatefulCreatePages: boolean;\n    limit: number;\n    numPages: number;\n    skip: number;\n  }\n}\n\nclass SiteNav extends React.Component<PaginationProps> {\n\n  constructor(props: PaginationProps) {\n    super(props);\n  };\n\n  render() {\n    const { baseURL = '/' } = this.props;\n    const { currentPage, numPages, limit, skip } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? `${baseURL}` : `${baseURL}page/${currentPage - 1}`\n    const nextPage = `${baseURL}page/${currentPage + 1}`\n\n    return (\n      [ <nav className=\"pagination\" role=\"navigation\">\n          {!isFirst && (\n            <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n              ← <span className=\"hide\">Previous Page</span>\n            </Link>\n          )}\n          <span className=\"page-number\">\n            <span className=\"hide\">\n              Page {currentPage}/{numPages}\n            </span>\n          </span>\n          {!isLast && (\n            <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n              <span className=\"hide\">Next Page</span> →\n            </Link>\n          )}\n        </nav>]\n    );\n  }\n}\n\nexport default SiteNav;\n\n\n\n            ","import { graphql, Link } from 'gatsby';\nimport * as React from 'react';\nimport { css } from '@emotion/core';\nimport Helmet from 'react-helmet';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/pagination/Pagination';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport config from '../website-config';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from '../templates/post';\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card:nth-of-type(6n + 1):not(.no-image) {\n      flex: 1 1 100%;\n      flex-direction: row;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      border-radius: 5px 0 0 5px;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-content {\n      flex: 0 1 357px;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) h2 {\n      font-size: 2.6rem;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) p {\n      font-size: 1.8rem;\n      line-height: 1.55em;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-content-link {\n      padding: 30px 40px 0;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-meta {\n      padding: 0 40px 30px;\n    }\n  }\n`;\n\ninterface PageTemplateProps {\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: any;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fluid: any;\n      };\n    };\n    allMarkdownRemark: {\n      edges: {\n        node: PageContext;\n      }[];\n    };\n  },\n  pageContext: {\n    currentPage: number;\n    isCreatedByStatefulCreatePages: boolean;\n    limit: number;\n    numPages: number;\n    skip: number;\n  }\n}\n\nconst PageTemplate: React.FunctionComponent<PageTemplateProps> = props => {\n  const width = props.data.header.childImageSharp.fluid.sizes.split(', ')[1].split('px')[0];\n  const height = String(Number(width) / props.data.header.childImageSharp.fluid.aspectRatio);\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.siteTitle}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.siteTitle} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.siteTitle} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={config.siteUrl + props.data.header.childImageSharp.fluid.src}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={config.siteUrl + props.data.header.childImageSharp.fluid.src}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width} />\n        <meta property=\"og:image:height\" content={height} />\n      </Helmet>\n      <Wrapper>\n        <header\n          css={[outer, SiteHeader]}\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fluid.src}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteHeaderContent>\n              <SiteTitle>\n                {\n                  config.title\n                }\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n            <SiteNav isHome={true} />\n          </div>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed, PostFeedRaise]}>\n              {props.data.allMarkdownRemark.edges.map(post => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} />\n                  )\n                );\n              })}\n            </div>\n            <Pagination pageContext={props.pageContext} baseURL=\"/\" />\n          </div>\n        </main>\n        {props.children}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default PageTemplate;\n\nexport const pageQuery = graphql`\n  query($limit: Int, $skip: Int) {\n    logo: file(relativePath: { eq: \"img/ghost-logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"img/blog-cover.jpg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fluid(maxWidth: 2000) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC },\n      filter: { frontmatter: { draft: { ne: true } } },\n      limit: $limit,\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            subtitle\n            date\n            tags\n            draft\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 90) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}